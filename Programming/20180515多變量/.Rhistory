L <-  LLI + De - 1
x.true <- array(0, c(n.true, p.true * (L - 1), replicate))
for( i.0.4 in 1 : replicate )
for( i.0.5 in 1 : n.true )
x.true[i.0.5, , i.0.4] <- matrix(t(B_orth(LLI, De, bkn, xx[i.0.5, , i.0.4])$b_function[, -1]),
ncol = p.true * (L - 1), nrow = 1)
which(is.na(x.true)==T)
initial<-c()
cccc<-c()
llll<-c()
rrrr<-c()
lambda.rep<-c()
set.seed(3)
J.init=2
beta.init <- array( runif( ( p.true * ( L - 1 ) ) * J.init * rep.same, -2, 2),
dim = c( ( p.true * ( L - 1 ) ), J.init, rep.same ))
sigma.init <- array( runif( rep.same*J.init, 0, 0.2), dim = c( rep.same, J.init  ) )
pi.init <- array( runif( J.init*rep.same, 0, 1), dim = c( rep.same, J.init ))
pi.init <- pi.init/rowSums(pi.init)
P.hat.fin<-array( 0, dim = c(n.true, J.init, replicate) )
beta.fin<-array( 0, dim = c((p.true * (L - 1)), J.init, replicate) )
sigma.fin<-pi.fin<-array( 0, dim = c(1, J.init, replicate) )
loop.fin<-matrix(0, nrow = replicate)
toc=Sys.time()
for( i in 1:replicate ){
n=dim(x.true)[1]
p=dim(x.true)[2]
beta.rep<-array( 0, dim = c( p, J.init, rep.same) )
sigma.rep<-pi.rep<-array( 0, dim = c(1, J.init, rep.same) )
P.hat.rep<-array( 0, dim = c(n, J.init, rep.same) )
loop.rep<-matrix(0, nrow = rep.same)
for( i.1 in 1 : rep.same ){
#CEM
J.rep <- J.init
y <- y.true[,, i]
x <- x.true[,, i]
beta.hat <- c()
sigma.hat <- c()
beta.hat <- beta.init[,, i.1]
sigma.hat <- sigma.init[i.1,]
pi.hat <- pi.init[i.1,]
normal<-function(Y,mu,var,max){ exp((-(Y-mu)^2/(2*var))-max)/sqrt(2*pi*var) }
w.sum <- matrix( 0 , nrow = n, ncol = J.rep )
temp.max.1<- matrix( 0 , nrow = n, ncol = J.rep )
for(i.2.3 in 1:n){
for(i.2.4 in 1:J.rep)
temp.max.1[i.2.3,i.2.4]<--(y[i.2.3]-x[i.2.3,]%*%beta.hat[,i.2.4])^2/(2* sigma.hat[i.2.4])
temp.max<-max(temp.max.1[i.2.3,])
for(i.2.2 in 1:J.rep)
w.sum[i.2.3,i.2.2] <- pi.hat[i.2.2] * normal(Y=y[i.2.3], mu=x[i.2.3,]%*%beta.hat[,i.2.2],
var=sigma.hat[i.2.2], max=temp.max)
}
w.sum <- rowSums(w.sum)
w.hat <- matrix( 0 , nrow = n, ncol = J.rep )
for(i.2.6 in 1 : n){
temp.max<-max(temp.max.1[i.2.6,])
for( i.2.5 in 1 : J.rep)
w.hat[i.2.6,i.2.5]<-pi.hat[i.2.5]*normal(Y=y[i.2.6], mu=x[i.2.6,]%*%beta.hat[, i.2.5],
var=sigma.hat[i.2.5], max=temp.max)/w.sum[i.2.6]
}
P.hat <- matrix(0, nrow = n, ncol = J.init)
for(i.3 in 1:n)
P.hat[i.3, which.max(w.hat[i.3,])]<-1
temp.stop <- 0
loop <- 1
criterion <- c()
beta.MSE.p <- c()
i.12.2<-0
x.P <- c()
y.P <- c()
w.hat.P <- c()
pi.hat <- c()
for( i.4 in 1 : J.init ){
x.P <- c(x.P, list(matrix(x[which(P.hat[,i.4]==1), ], ncol = p )))
y.P <- c(y.P, list(y[which(P.hat[, i.4]==1)]))
w.hat.P <- c(w.hat.P, list(w.hat[which(P.hat[, i.4]==1), i.4]))
pi.hat <- c(pi.hat, length(which(P.hat[, i.4]==1))/n)
}
cat( "data =", i )
cat("\n")
cat( "rep =", i.1 )
cat("\n")
cat( "loop =", 0 )
cat("\n")
cat(colSums(P.hat))
cat("\n")
while( loop < loop_max ){
if( length(which(colSums(P.hat)==1)) > 0 )
break
gamma <- phi <- array(0, c(p, nlambda, J.init))
BIC <- BIC_log <- array(0, c(nlambda, J.init))
for(i.5.1 in 1:J.rep){
max.lambda <- sum(abs(t(x.P[[i.5.1]]) %*% y.P[[i.5.1]])) / svd(x.P[[i.5.1]])$d[1]
lambda <-c(0, exp(seq(log(max.lambda / 1e4), log(max.lambda),
length = (nlambda - 1) )))
result <-qr_glasso( as.matrix(y.P[[i.5.1]]), x.P[[i.5.1]], L - 1, tau = tau,
lambda = lambda)
gamma[ , , i.5.1] <- result$gamma
phi[ , , i.5.1] <- result$phi
BIC[, i.5.1] <- result$BIC[, 1]
BIC_log[, i.5.1] <- result$BIC[, 2]
}
for(i.5.2 in 1 : J.init){
beta.hat[,i.5.2] = gamma[, which.min(BIC_log[,i.5.2]), i.5.2]
}
sigma.hat<-matrix(0, ncol = J.init)
for(i.6 in 1 : J.rep)
sigma.hat[i.6]<-(w.hat.P[[i.6]]%*%((y.P[[i.6]]-x.P[[i.6]]%*%beta.hat[,i.6])^2))/
sum(w.hat.P[[i.6]])
if(J.rep==1){
print("J.rep=1")
break
}
w.sum <- matrix( 0, nrow = n )
for(i.7 in 1:J.rep)
w.sum<-cbind(w.sum,dnorm(y,x%*%beta.hat[,i.7],sqrt(sigma.hat[i.7]))*pi.hat[i.7])
w.sum<-rowSums(w.sum)
w.hat<-matrix(0,nrow = n,ncol = J.init)
for(i.8 in 1:J.rep)
w.hat[,i.8]<-pi.hat[i.8]*dnorm(y,x%*%beta.hat[,i.8],sqrt(sigma.hat[i.8]))/w.sum
P.hat<-matrix(0,nrow = n,ncol = J.init)
for(i.9 in 1:n)
P.hat[i.9,which.max(w.hat[i.9,])]<-1
#To check if there is a group that have no object.
i.12.0<-length(which(colSums(P.hat)==0))
i.12.1<-which(colSums(P.hat)==0)
if(i.12.0 > i.12.2){
P.hat<-P.hat[,-i.12.1]
beta.hat<-beta.hat[,-i.12.1]
J.rep<-J.rep-i.12.0+i.12.2
P.hat<-cbind(P.hat,matrix(0,ncol=i.12.0,nrow = n))
beta.hat<-cbind(beta.hat,matrix(0,ncol=i.12.0,nrow = p))
i.12.2 <- i.12.2 + i.12.0
}
x.P<-c()
y.P<-c()
w.hat.P<-c()
for( i.10 in 1:J.rep ){
x.P<-c(x.P,list(matrix(x[which(P.hat[,i.10]==1),],ncol = p )))
y.P<-c(y.P,list(y[which(P.hat[,i.10]==1)]))
w.hat.P<-c(w.hat.P,list(w.hat[which(P.hat[,i.10]==1),i.10]))
}
pi.hat<-c()
for( i.10.1 in 1:J.init ){
pi.hat<-c(pi.hat,length(which(P.hat[,i.10.1]==1))/n)
}
cri.sum<-0
for( i.11 in 1:J.rep )
cri.sum<-cri.sum+sum(log(dnorm(y.P[[i.11]],x.P[[i.11]]%*%beta.hat[,i.11],
sqrt(sigma.hat[i.11]))*pi.hat[i.11]))
criterion<-c(criterion,cri.sum)
cat( "data =", i )
cat("\n")
cat( "rep =", i.1 )
cat("\n")
cat( "loop =", loop )
cat("\n")
cat(temp.stop)
cat("\n")
# cat( lambda )
# cat("\n")
cat("criterion =",cri.sum)
cat("\n")
cat(colSums(P.hat))
cat("\n")
#Stopping Rule
if( loop>1 ){
if( abs(criterion[loop]-criterion[(loop-1)]) < 1e-10 )
break
if(length(which((temp.P==P.hat)==F))==0){
temp.stop<-temp.stop+1
}else{
temp.stop<-0
}
if( temp.stop >= 5 ){
print(1)
cat("\n")
break
}
}
temp.P<-P.hat
loop<-loop+1
}
llll<-c(llll,loop)
cccc<-c(cccc,list(criterion))
rrrr<-c(rrrr,list(list(data=i,rep=i.1,loop=loop,beta=beta.hat,
sigma=sigma.hat,
pi=pi.hat,lambda=lambda,
P.hat=P.hat)))
lambda.rep<-c(lambda.rep,lambda)
cat("criterion =",criterion)
cat("\n")
for( i.13 in 1:J.init ){
beta.rep[,i.13,i.1]<-beta.hat[,i.13]
sigma.rep[,i.13,i.1]<-sigma.hat[i.13]
pi.rep[,i.13,i.1]<-pi.hat[i.13]
P.hat.rep[,i.13,i.1]<-P.hat[,i.13]
}
loop.rep[i.1,]<-loop
}
beta.result<-c()
for(i.14.1 in 1:rep.same){
for( i.14.2 in 1:J.init ){
x.P[[i.14.2]]<-matrix(x[which(P.hat.rep[,i.14.2,i.14.1]==1),],ncol = p )
y.P[[i.14.2]]<-y[which(P.hat.rep[,i.14.2,i.14.1]==1)]
}
#Compute the log likelihood to decide the best.
res.sum<-0
for( i.14.3 in 1:J.init )
res.sum<-res.sum+sum(log(dnorm(y.P[[i.14.3]],x.P[[i.14.3]]%*%beta.rep[,i.14.3,i.14.1],
sqrt(sigma.rep[,i.14.3,i.14.1]))*pi.rep[,i.14.3,i.14.1]))
beta.result<-c(beta.result,res.sum)
}
#result
best.rep<-which.max(beta.result)
P.hat.fin[,,i]<-P.hat.rep[,,best.rep]
beta.fin[,,i]<-beta.rep[,,best.rep]
sigma.fin[,,i]<-sigma.rep[,,best.rep]
pi.fin[,,i]<-pi.rep[,,best.rep]
loop.fin[i,]<-loop.rep[best.rep,]
}
tic=Sys.time()
time=tic-toc
beta.last<-array(0,dim=c(p.true*LLI,J.init,replicate))
sigma.last<-array(0,dim=c(1,J.init,replicate))
pi.last<-array(0,dim=c(1,J.init,replicate))
P.last<-array(0,dim=c(n.true,J.init,replicate))
temp.group<-c()
for(i.19.1 in 1:replicate){
j.1<-1
j.2<-n.true*pi.true[1]
for( i.19.2 in 1:J.init ){
if(i.19.2==1){
temp.1<-colSums(P.hat.fin[j.1:j.2,,i.19.1])
temp.group<-which.max(temp.1)
j.1<-j.1+n.true*pi.true[i.19.2]
j.2<-j.2+n.true*pi.true[i.19.2]
beta.last[,i.19.2,i.19.1]<-beta.fin[,which.max(temp.1),i.19.1]
sigma.last[,i.19.2,i.19.1]<-sigma.fin[,which.max(temp.1),i.19.1]
pi.last[,i.19.2,i.19.1]<-pi.fin[,which.max(temp.1),i.19.1]
P.last[,i.19.2,i.19.1]<-P.hat.fin[,which.max(temp.1),i.19.1]
}else{
temp.1<-colSums(P.hat.fin[j.1:j.2,,i.19.1])
if(temp.group==which.max(temp.1) && temp.group==1){
beta.last[,i.19.2,i.19.1]<-beta.fin[,2,i.19.1]
sigma.last[,i.19.2,i.19.1]<-sigma.fin[,2,i.19.1]
pi.last[,i.19.2,i.19.1]<-pi.fin[,2,i.19.1]
P.last[,i.19.2,i.19.1]<-P.hat.fin[,2,i.19.1]
}else if (temp.group==which.max(temp.1) && temp.group==2){
beta.last[,i.19.2,i.19.1]<-beta.fin[,1,i.19.1]
sigma.last[,i.19.2,i.19.1]<-sigma.fin[,1,i.19.1]
pi.last[,i.19.2,i.19.1]<-pi.fin[,1,i.19.1]
P.last[,i.19.2,i.19.1]<-P.hat.fin[,1,i.19.1]
}else{
beta.last[,i.19.2,i.19.1]<-beta.fin[,which.max(temp.1),i.19.1]
sigma.last[,i.19.2,i.19.1]<-sigma.fin[,which.max(temp.1),i.19.1]
pi.last[,i.19.2,i.19.1]<-pi.fin[,which.max(temp.1),i.19.1]
P.last[,i.19.2,i.19.1]<-P.hat.fin[,which.max(temp.1),i.19.1]
}
j.1<-j.1+n.true*pi.true[i.19.2]
j.2<-j.2+n.true*pi.true[i.19.2]
}
}
}
beta.mean<-matrix(0,ncol = J.true,nrow = p)
for( i.16 in 1:J.init ){
beta.mean[,i.16]<-rowMeans(beta.last[,i.16,])
}
#              Prediction Error              #
pred.error<-matrix(0, nrow = replicate, ncol = J.init)
for( i.17.3 in 1 : replicate ){
i.17.1<-1
i.17.2<-n.true*pi.true[1]
for( i.17.4 in 1 : J.init ){
pred.error[i.17.3,i.17.4]<-sum((x.true[i.17.1:i.17.2,,i.17.3]%*%beta.last[,i.17.4,i.17.3]-y.true[i.17.1:i.17.2,,i.17.3])^2)
i.17.1<-i.17.1+n.true*pi.true[i.17.4]
i.17.2<-i.17.2+n.true*pi.true[i.17.4]
}
}
#  GROUPING  Type I error && Type II error for group 1 & 2   #
TP<-0
FP<-0
FN<-0
TN<-0
for(i.18 in 1:replicate){
TP<-TP+length(which(!is.na(match(which(P.last[,1,i.18]==1),1:(n.true*pi.true[1])))==T))/replicate
FP<-FP+length(which(!is.na(match(which(P.last[,2,i.18]==1),1:(n.true*pi.true[1])))==T))/replicate
FN<-FN+length(which(!is.na(match(which(P.last[,1,i.18]==1),((n.true*pi.true[1])+1):(n.true)))==T))/replicate
TN<-TN+length(which(!is.na(match(which(P.last[,2,i.18]==1),((n.true*pi.true[1])+1):(n.true)))==T))/replicate
}
beta.mean[1:20,]
length(which(beta.mean[20:p,]>1e-2))
length(which(beta.mean[20:p,]>1e-3))
length(which(beta.mean[20:p,]>1e-4))
time
mean(loop.fin)
pred.error
colSums(P.last)
TP/(n.true*pi.true[1])
FP/(n.true*pi.true[1])
FN/(n.true*pi.true[2])
TN/(n.true*pi.true[2])
# llll
# beta.fin[1:20,,1]
install.packages("dplyr")
max.lambda <- sum(abs(t(x.P[[i.5.1]]) %*% y.P[[i.5.1]])) / svd(x.P[[i.5.1]])$d[1]
lambda <-c(0, exp(seq(log(max.lambda / 1e4), log(max.lambda),
length = (nlambda - 1) )))
result <-qr_glasso( as.matrix(y.P[[i.5.1]]), x.P[[i.5.1]], L - 1, tau = tau,
lambda = lambda)
as.matrix(y.P[[i.5.1]])
x.P[[i.5.1]]
L - 1
tau
lambda
result <-qr_glasso( as.matrix(y.P[[i.5.1]]), x.P[[i.5.1]], L - 1, tau = tau,
lambda = lambda)
# clear variables and close windows
rm(list = ls(all = TRUE))
graphics.off()
#讀資料
setwd("C:/Users/User/Desktop/20180515多變量")
data<-read.csv("(去程)(原始資料).csv",header = TRUE, sep = ",")
head(data)
data[,4]<-as.Date(data[,4])#把日期當作日期
data<-data[order(data[,4]),]#排序
attach(data)
x8165<-data[路線==8165,]#整年份8165
x8166<-data[路線==8166,]#整年份8166
x8161<-data[路線==8161,]#整年份8161
x8163<-data[路線==8163,]#整年份8163
m<-min(which(x8165[,4]=="2016/1/1"))
M<-max(which(x8165[,4]=="2016/1/20"))
x8165_1<-x8165[m:M,]#8165的第一個月
head(x8165_1)
table(x8165[,7])
a<-c("臺東轉運站","中央市場","署東醫院","變電所","舊縣議會","更生四維路口","馬蘭加油站",
"公東高工","馬蘭榮家","卑南農會","卑南","卑南國小","南王","卑南國中","十股","下賓朗",
"賓朗","種畜場","美濃入口","東成","美濃","集貨場","煙草間","初鹿國中","明峰","初鹿",
"龍過脈","嘉豐入口","舊鹿鳴","四維","湖底","龍田","光榮","龍田國小","鹿野國中","鹿野",
"鹿野鄉公所","水源地","永隆","飛行夢工場","永興","永安農場","武陵","武麟山莊","明野",
"新豐","景豐","加拿","月眉國小","月眉","崁頂","親水公園","關山","關山國小","關山慈濟",
"米國學校","德高","頂庄","北庄","山平路","海端","隴下","初來","錦屏","陸安","大同農場",
"池上鄉公所","池上郵局","池上","慶豐","冷水","富南國小","富里")
x8165_1[,7]<-factor(x8165_1[,7],levels=a,ordered=T)
plot(x=x8165_1[,6],            # X軸的值
y=x8165_1[,7],             # Y軸的值
main="時間與站點",   # 圖片名稱
xlab="時間分鐘",            # X軸名稱
ylab="站點",
yaxt='n') # Y軸名稱
axis(2,c(1:73),a)
# clear variables and close windows
rm(list = ls(all = TRUE))
graphics.off()
#讀資料
setwd("C:/Users/User/Desktop/(去程)修改路名0514")#學校電腦
data<-read.csv("(去程)修改路名0514.csv",header = TRUE, sep = ",")
attach(data)
head(data)
data[,4]<-as.Date(data[,4])#把日期當作日期
data<-data[order(data[,4]),]#排序
x8165<-data[路線==8165,1:11]#整年份8165
x8166<-data[路線==8166,1:11]#整年份8166
x8161<-data[路線==8166,1:11]#整年份8161
x8163<-data[路線==8166,1:11]#整年份8163
m<-min(which(x8165[,4]=="2016/1/1"))
M<-max(which(x8165[,4]=="2016/1/20"))
x8165_1<-x8165[m:M,]#8165的第一個月
head(x8165_1)
table(x8165[,7])
length(which(table(x8165[,7])!=0))#知道站點數
##時間跟站點圖
# clear variables and close windows
rm(list = ls(all = TRUE))
graphics.off()
#讀資料
setwd("C:/Users/User/Desktop/(去程)修改路名0514")#學校電腦
data<-read.csv("(去程)修改路名0514.csv",header = TRUE, sep = ",")
attach(data)
head(data)
data[,4]<-as.Date(data[,4])#把日期當作日期
data<-data[order(data[,4]),]#排序
x8165<-data[路線==8165,1:11]#整年份8165
x8166<-data[路線==8166,1:11]#整年份8166
x8161<-data[路線==8166,1:11]#整年份8161
x8163<-data[路線==8166,1:11]#整年份8163
m<-min(which(x8165[,4]=="2016/1/1"))
M<-max(which(x8165[,4]=="2016/1/20"))
x8165_1<-x8165[m:M,]#8165的第一個月
head(x8165_1)
table(x8165[,7])
length(which(table(x8165[,7])!=0))#知道站點數
##時間跟站點圖
# clear variables and close windows
rm(list = ls(all = TRUE))
graphics.off()
#讀資料
setwd("C:/Users/User/Dropbox/busticket/105整年(已洗清)")
data<-read.csv("105年平日.csv",header = TRUE, sep = ",")
attach(data)
head(data)
x<-data[路線==8129,1:11]#整年份8129
head(x)
x_1<-x[1:4340,]#8129的第一個月
head(x_1)
#用來檢查那些站點不存在-------------------------------------------
#which(x_1[,7]=="健康農莊")
#x_1[145,]
#M_x_1[145,]
#which(colSums(M_x_1)==0)
#-----------------------------------------------------------------
#第一列為站點,第一行為樣本點
M_x_1<-matrix(rep(0,325500), nrow = 4340, ncol = 75)
v<-c("台東","台東X","新生站","新生站X","台東中學","台東中學X","金剛寺","金剛寺X","豐榮國小","豐榮國小X","東豐","東豐X",
"一支線","一支線X","豐谷里","豐谷里X","豐里國小","豐里國小X","洽益米廠","洽益米廠X","豐里","豐里X","豐源國小","豐源國小X",
"豐源","豐源X","大學路口","大學路口X","台東大學","台東大學X","開發隊A","開發隊AX","開發隊B","開發隊BX",
"煙仔寮","煙仔寮X","知本火車站","知本火車站X","知本派出所","知本派出所X","知本國小","知本國小X","知本農場","知本農場X",
"知本村","知本村X","新興里","新興里X","知本教會","知本教會X","崎仔頭","崎仔頭X","鎮樂","鎮樂X","溫泉國小","溫泉國小X","東遊季","東遊季X","知本溫泉","知本溫泉X",
"白玉瀑布","白玉瀑布X","清覺寺","清覺寺X","泓泉飯店","泓泉飯店X","東台飯店","東台飯店X","內溫泉","內溫泉X","票種-敬老票","票種-學生票","票種-陪伴票","票種-一般票","孩童票")
#把y票種換成01向量
for(i in c(1:4340)){
if(x_1[i,3]=="敬老票"){
M_x_1[i,71]<-1
}else if(x_1[i,3]=="學生票"){
M_x_1[i,72]<-1
}else if(x_1[i,3]=="陪伴票"){
M_x_1[i,73]<-1
}else if(x_1[i,3]=="一般票"){
M_x_1[i,74]<-1
}else{
M_x_1[i,75]<-1
}
}
head(M_x_1)
odds <- seq(1,70, 2)#把上下站改成1
#把資料改成01形式,除了最後5col
idx<-c()
for(i in c(1:4340) ){
for(j in odds){
if(x_1[i,7]==v[j]&&x_1[i,11]==v[j]){
idx<-i#把上下站點為同一站清掉
}else if(x_1[i,7]==v[j]||x_1[i,11]==v[j]){
M_x_1[i,j]=1
M_x_1[i,j+1]=0
}else{
M_x_1[i,j]=0
M_x_1[i,j+1]=1
}
}
}
head(M_x_1)
idx
M_x_1<-M_x_1[-idx,]#整理資料
colnames(M_x_1)=c("台東","台東X","新生站","新生站X","台東中學","台東中學X","金剛寺","金剛寺X","豐榮國小","豐榮國小X"
,"東豐","東豐X","一支線","一支線X","豐谷里","豐谷里X","豐里國小","豐里國小X","洽益米廠","洽益米廠X",
"豐里","豐里X","豐源國小","豐源國小X","豐源","豐源X","大學路口","大學路口X","台東大學","台東大學X"
,"開發隊A","開發隊AX","開發隊B","開發隊BX","煙仔寮","煙仔寮X",
"知本火車站","知本火車站X","知本派出所","知本派出所X","知本國小","知本國小X","知本農場","知本農場X",
"知本村","知本村X","新興里","新興里X","知本教會","知本教會X","崎仔頭","崎仔頭X","鎮樂","鎮樂X","溫泉國小","溫泉國小X","東遊季","東遊季X","知本溫泉","知本溫泉X",
"白玉瀑布","白玉瀑布X","清覺寺","清覺寺X","泓泉飯店","泓泉飯店X","東台飯店","東台飯店X","內溫泉","內溫泉X","票種-敬老票","票種-學生票","票種-陪伴票","票種-一般票","孩童票")
head(M_x_1)#一月份原始資料矩陣
#--------------------------------------------------------------------------------------------------
x = M_x_1[,c(1:70)]
n = nrow(x)
p = ncol(x)
one = matrix(1, n, n)
h = diag(1, n, n) - one/n  # centering the matrix
a = x - matrix(apply(x, 2, mean), n, p, byrow = T)  # substracts mean
d = diag(1/sqrt(colSums(a^2)/n))
xs = h %*% as.matrix(x) %*% d  # standardized data
xs1 = xs/sqrt(n)
xs2 = t(xs1) %*% xs1
#
eig = eigen(xs2)  # spectral decomposition
lambda = eig$values
gamma = eig$vectors
w = gamma * (matrix(sqrt(lambda), nrow = nrow(gamma), ncol = ncol(gamma), byrow = T))  # coordinates of food
w = w[, 1:2]
w = round(w, 3)
z1 = xs1 %*% gamma  # coordinates of families
z2 = sqrt(n/p) * z1
z = z2[, 1:2]
z = round(z, 3)
namew = c("台東","台東X","新生站","新生站X","台東中學","台東中學X","金剛寺","金剛寺X","豐榮國小","豐榮國小X","東豐","東豐X",
"一支線","一支線X","豐谷里","豐谷里X","豐里國小","豐里國小X","洽益米廠","洽益米廠X","豐里","豐里X","豐源國小","豐源國小X",
"豐源","豐源X","大學路口","大學路口X","台東大學","台東大學X","開發隊A","開發隊AX","開發隊B","開發隊BX",
"煙仔寮","煙仔寮X","知本火車站","知本火車站X","知本派出所","知本派出所X","知本國小","知本國小X","知本農場","知本農場X",
"知本村","知本村X","新興里","新興里X","知本教會","知本教會X","崎仔頭","崎仔頭X","鎮樂","鎮樂X","溫泉國小","溫泉國小X","東遊季","東遊季X","知本溫泉","知本溫泉X",
"白玉瀑布","白玉瀑布X","清覺寺","清覺寺X","泓泉飯店","泓泉飯店X","東台飯店","東台飯店X","內溫泉","內溫泉X")
namez = c(1:nrow(x))
par(mfrow = c(2, 2))
windows()
plot(w[, 1], -w[, 2], type = "n", xlab = "W[,1]", ylab = "W[,2]", main = "站點", cex.axis = 1.2,
cex.lab = 1.2, cex.main = 1.6, xlim = c(-1, 1), ylim = c(-0.8, 0.8))
text(w[, 1], -w[, 2], namew, xpd = NA)
abline(h = 0, v = 0, lwd = 1.2)
for (i in 1:ncol(x)) {
mtext(namew[i], side = 1, line = 5 + i, at = -1)
mtext(toString(c(sprintf("%.3f", w[i, 1]))), side = 1, line = 5 + i, at = -0.25)
mtext(toString(c(sprintf("%.3f", w[i, 2]))), side = 1, line = 5 + i, at = 0.5)
}
plot(z[, 1], -z[, 2], type = "n", xlim = c(-0.6, 0.5), ylim = c(-0.5, 0.7), xlab = "Z[,1]",
ylab = "Z[,2]", main = "樣本點", cex.axis = 1.2, cex.lab = 0.8, cex.main = 0.8)
text(z[, 1], -z[, 2], namez, xpd = NA)
abline(h = 0, v = 0, lwd = 1.2)
for (i in 1:nrow(x)) {
mtext(namez[i], side = 1, line = 5 + i, at = -0.5)
mtext(toString(c(sprintf("%.3f", z[i, 1]))), side = 1, line = 5 + i, at = -0.25)
mtext(toString(c(sprintf("%.3f", z[i, 2]))), side = 1, line = 5 + i, at = 0.25)
}
xs2
